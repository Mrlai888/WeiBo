(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{235:function(e,a,t){"use strict";t.r(a);var n=t(0),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"typescript"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[e._v("#")]),e._v(" TypeScript")]),e._v(" "),t("h2",{attrs:{id:"一-ts的介绍安装与开发工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-ts的介绍安装与开发工具"}},[e._v("#")]),e._v(" 一. ts的介绍安装与开发工具")]),e._v(" "),t("h3",{attrs:{id:"_1-1-ts介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-ts介绍"}},[e._v("#")]),e._v(" 1-1 ts介绍")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("TypeScript是由微软开发的一款开源的编程语言。")])]),e._v(" "),t("li",[t("p",[e._v("TypeScript是Javascript的超集，遵循最新的ES6/ES5规范。TypeScript扩展了Javascript的语法。")])]),e._v(" "),t("li",[t("p",[e._v("TypeScript更像后端Java、C#这样的面向对象的语言，可以让js开发大型项目。")])]),e._v(" "),t("li",[t("p",[e._v("谷歌也在大力支持TypeScript的推广，谷歌的angular2.x+就是基于TS语法。")])]),e._v(" "),t("li",[t("p",[e._v("TypeScript 设计目标是开发大型应用，它可以编译成纯 JavaScript，编译出来的 JavaScript 可以运行在任何浏览器上")])]),e._v(" "),t("li",[t("p",[e._v("TypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法，因此现有的 JavaScript 代码可与 TypeScript 一起工作无需任何修改，TypeScript 通过类型注解提供编译时的静态类型检查。")])]),e._v(" "),t("li",[t("p",[e._v("TypeScript 可处理已有的 JavaScript 代码，并只对其中的 TypeScript 代码进行编译。")])])]),e._v(" "),t("h3",{attrs:{id:"_2-2-ts的安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-ts的安装"}},[e._v("#")]),e._v(" 2-2  ts的安装")]),e._v(" "),t("p",[e._v("​")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("cnpm  i  typescript -g\n\ntsc  hello.ts\n\n（tsc ./src/hello.ts --outFile ./dist/hello.js）\n")])])]),t("h3",{attrs:{id:"_2-3-vscode-的配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-vscode-的配置"}},[e._v("#")]),e._v(" 2-3 vscode 的配置")]),e._v(" "),t("p",[e._v('​\t1. tsc --init  生成tsconfig.json 配置文件，然后修改outDir:"./dist"')]),e._v(" "),t("p",[e._v("​\t2. 终端-运行任务-监视tsconfig.json")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"outDir": "./dist",         \n"rootDir": "./src",         \n')])])]),t("h2",{attrs:{id:"二-ts的数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-ts的数据类型"}},[e._v("#")]),e._v(" 二. ts的数据类型")]),e._v(" "),t("p",[e._v("​\ttypescript中为了使编写的代码更加规范，更有利于维护，增加了类型校验，在ts中主要给我们提供了如下数据类型：")]),e._v(" "),t("p",[e._v("​")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("布尔类型\n数字类型\n字符串类型\n数组类型\n元组类型\n枚举类型\n任意类型\nnull和undefined\nvoid类型\nnever类型 (永远不会有返回值的情况，例如死循环、抛出异常的情况)\n")])])]),t("h3",{attrs:{id:"_2-1数据类型-基础："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1数据类型-基础："}},[e._v("#")]),e._v(" 2-1数据类型-基础：")]),e._v(" "),t("p",[e._v("​\tTypeScript包含的最简单的数据单元有：数字，字符串，布尔值，Null 和 Undefined等。TypeScript支持与JavaScript几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。常见的有布尔值、数字、字符串、数组、元组、枚举、any 和 void 等")]),e._v(" "),t("h4",{attrs:{id:"布尔值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[e._v("#")]),e._v(" 布尔值")]),e._v(" "),t("p",[e._v("​\t最基本的数据类型就是简单的"),t("code",[e._v("true/false")]),e._v("值，在JavaScript和TypeScript里叫做"),t("code",[e._v("boolean")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let isDone: boolean = false\n")])])]),t("h4",{attrs:{id:"数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数字"}},[e._v("#")]),e._v(" 数字")]),e._v(" "),t("p",[e._v("​\t和JavaScript一样，TypeScript里的所有数字都是浮点数。 这些浮点数的类型是"),t("code",[e._v("number")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let decLiteral: number = 6\n")])])]),t("h4",{attrs:{id:"字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[e._v("#")]),e._v(" 字符串")]),e._v(" "),t("p",[e._v("​\tTypeScript像其它语言里一样，使用"),t("code",[e._v("string")]),e._v("表示文本数据类型。 和JavaScript一样，可以使用双引号（\"）或单引号（'）表示字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('let from: string = "千锋教育"\nfrom = "好程序员"\n')])])]),t("p",[e._v("​    也使用模版字符串，定义多行文本和内嵌表达式。 这种字符串是被反引号包围（`），并且以${ expr }这种形式嵌入表达式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let surname: string = `Felix`\nlet age: number = 37\nlet sentence: string = `Hello, my name is ${ surname }.\n\nI'll be ${ age + 1 } years old next month.`\n")])])]),t("h4",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[e._v("#")]),e._v(" 数组")]),e._v(" "),t("p",[e._v("​\tTypeScript像JavaScript一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 "),t("code",[e._v("[]")]),e._v("，表示由此类型元素组成的一个数组：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let list: number[] = [1, 2, 3]\n")])])]),t("p",[e._v("第二种方式是使用数组泛型，Array<元素类型>：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let list: Array<number> = [1, 2, 3]\n")])])]),t("h4",{attrs:{id:"元组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元组"}},[e._v("#")]),e._v(" 元组")]),e._v(" "),t("p",[e._v("​\t元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string和number类型的元组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 声明一个元组类型 x\nlet x: [string, number]\n// 初始化 x\nx = ['hello', 10] // OK\n// 无效的初始值\nx = [10, 'hello'] // Error\n")])])]),t("p",[e._v("当访问一个已知索引的元素，会得到正确的类型：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("console.log(x[0].substr(1)) // OK\nconsole.log(x[1].substr(1)) // Error, 'number' 不存在 'substr' 方法\n")])])]),t("p",[e._v("当访问一个越界的元素，会出现错误：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("x[3] = \"world\" // Error, '[string, number]' 未定义第 3 个元素的类型.\nconsole.log(x[5].toString()) // Error, '[string, number]' 未定义第 5 个元素的类型.\n")])])]),t("h4",{attrs:{id:"枚举"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[e._v("#")]),e._v(" 枚举")]),e._v(" "),t("p",[e._v("​\tenum类型是对JavaScript标准数据类型的一个补充。 使用枚举类型可以为一组数值赋予友好的名字。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("enum Color {Red, Green, Blue}\nlet c: Color = Color.Green\n")])])]),t("p",[e._v("默认情况下，从 0 开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 1 开始编号：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("enum Color {Red = 1, Green, Blue}\nlet c: Color = Color.Green\n")])])]),t("p",[e._v("或者，全部都采用手动赋值：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("enum Color {Red = 1, Green = 2, Blue = 4}\nlet c: Color = Color.Green\n")])])]),t("p",[e._v("枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到Color里的哪个名字，我们可以查找相应的名字：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("enum Color {Red = 1, Green, Blue}\nlet colorName: string = Color[2]\nconsole.log(colorName)  // 'Green'\n")])])]),t("h4",{attrs:{id:"any"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#any"}},[e._v("#")]),e._v(" any")]),e._v(" "),t("p",[e._v("​\t有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用"),t("code",[e._v("any")]),e._v("类型来标记这些变量：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('let notSure: any = 4\nnotSure = "maybe a string instead" // OK 赋值了一个字符串\nnotSure = false // OK 赋值了一个布尔值\n')])])]),t("p",[e._v("在对现有代码进行改写的时候，"),t("code",[e._v("any")]),e._v(" 类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let notSure: any = 4\nnotSure.ifItExists() // okay, ifItExists函数在运行时可能存在\nnotSure.toFixed() // okay, toFixed 函数存在 (在编译时不做检查)\n")])])]),t("p",[e._v("当你只知道一部分数据的类型时，"),t("code",[e._v("any")]),e._v(" 类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('let list: any[] = [1, true, "free"]\nlist[1] = 100\n')])])]),t("h4",{attrs:{id:"void"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#void"}},[e._v("#")]),e._v(" void")]),e._v(" "),t("p",[e._v("​\t某种程度上来说，"),t("code",[e._v("void")]),e._v("类型像是与"),t("code",[e._v("any")]),e._v("类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 "),t("code",[e._v("void")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function echo(): void {\n  console.log('做真实的自己，用良心做教育')\n}\n")])])]),t("h3",{attrs:{id:"_2-2数据类型-高级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2数据类型-高级"}},[e._v("#")]),e._v(" 2-2数据类型-高级")]),e._v(" "),t("h4",{attrs:{id:"类型推断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型推断"}},[e._v("#")]),e._v(" 类型推断")]),e._v(" "),t("p",[e._v("如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。")]),e._v(" "),t("h4",{attrs:{id:"什么是类型推断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是类型推断"}},[e._v("#")]),e._v(" 什么是类型推断")]),e._v(" "),t("p",[e._v("以下代码虽然没有指定类型，但是会在编译的时候报错：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let lunarDay = '初一'\nlunarDay = 1\n// Type '1' is not assignable to type 'string'.\n")])])]),t("p",[e._v("事实上，它等价于：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let lunarDay: string = '初一'\nlunarDay = 1\n")])])]),t("p",[e._v("TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。 如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查：")]),e._v(" "),t("p",[e._v("let myFavoriteNumber")]),e._v(" "),t("p",[e._v("myFavoriteNumber = 'seven'")]),e._v(" "),t("p",[e._v("myFavoriteNumber = 7")]),e._v(" "),t("p",[e._v('let someValue: any = "this is a string"')]),e._v(" "),t("p",[e._v("let strLength: number = (someValue).length")]),e._v(" "),t("p",[e._v("另一个为as语法：")]),e._v(" "),t("p",[e._v('let someValue: any = "this is a string"')]),e._v(" "),t("p",[e._v("let strLength: number = (someValue as string).length")]),e._v(" "),t("p",[e._v("两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好")]),e._v(" "),t("h4",{attrs:{id:"联合类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联合类型"}},[e._v("#")]),e._v(" 联合类型")]),e._v(" "),t("p",[e._v("联合类型（Union Types）表示取值可以为多种类型中的一种。")]),e._v(" "),t("h5",{attrs:{id:"简单的例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单的例子"}},[e._v("#")]),e._v(" 简单的例子")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let lunarDay:string | number\nlunarDay = '初一'\nlunarDay = 1\n")])])]),t("p",[e._v("联合类型使用 | 分隔每个类型。")]),e._v(" "),t("p",[e._v("这里的"),t("code",[e._v("let lunarDay: string | number")]),e._v("的含义是，允许 lunarDay 的类型是 string 或者 number，但是不能是其他类型。")]),e._v(" "),t("h4",{attrs:{id:"访问联合类型的属性或方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问联合类型的属性或方法"}},[e._v("#")]),e._v(" 访问联合类型的属性或方法")]),e._v(" "),t("p",[e._v("当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function getLength(something: string | number): number {\n  return something.length\n}\n// Property 'length' does not exist on type 'string | number'.\n// Property 'length' does not exist on type 'number'.\n")])])]),t("p",[e._v("上例中，length 不是 string 和 number 的共有属性，所以会报错。 访问 string 和 number 的共有属性是没问题的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function getString(something: string | number): string {\n  return something.toString()  //访问了number和string的公共属性toString,是没有任何问题的！\n}\n")])])]),t("h4",{attrs:{id:"联合类型赋值的类型推断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联合类型赋值的类型推断"}},[e._v("#")]),e._v(" 联合类型赋值的类型推断")]),e._v(" "),t("p",[e._v("联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let lunarDay: string | number\nlunarDay = '初一'\nconsole.log(lunarDay.length) // 2\nlunarDay = 1\nconsole.log(lunarDay.length) // 编译时报错\n")])])]),t("p",[e._v("上例中，第二行的 lunarDay 被推断成了 string，访问它的 length 属性不会报错。 而第四行的 lunarDay 被推断成了 number，访问它的 length 属性时就报错了。")]),e._v(" "),t("h4",{attrs:{id:"null-和-undefined"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined"}},[e._v("#")]),e._v(" Null 和 Undefined")]),e._v(" "),t("p",[t("code",[e._v("null")]),e._v(" 是一个只有一个值的特殊类型。表示一个空对象引用。用 typeof 检测 null 返回是 "),t("code",[e._v("object")]),e._v("。 typeof 一个没有值的变量会返回 "),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("p",[e._v("null 和 Undefined 是其他任何类型（包括 void）的子类型，可以赋值给其它类型，如数字类型，此时，赋值后的类型会变成 null 或 undefined。")]),e._v(" "),t("p",[e._v("在TypeScript中启用严格的空校验（--strictNullChecks）特性，使得 "),t("code",[e._v("null")]),e._v(" 和 "),t("code",[e._v("undefined")]),e._v(" 只能被赋值给 "),t("code",[e._v("void")]),e._v(" 或本身对应的类型")]),e._v(" "),t("p",[e._v("在 tsconfig.json 中启用 --strictNullChecks")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let x: number\nx = 1 // 运行正确\nx = undefined // 运行错误\nx = null // 运行错误\n")])])]),t("p",[e._v("在 tsconfig.json 中启用 --strictNullChecks，需要将x赋值为联合类型")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let x: number | null | undefined //本身对应的类型\nx = 1 // 运行正确\nx = undefined // 运行正确\nx = null // 运行正确\n")])])]),t("h4",{attrs:{id:"never"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#never"}},[e._v("#")]),e._v(" Never")]),e._v(" "),t("p",[e._v("never类型表示的是那些永不存在的值的类型。 例如， never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 never类型，当它们被永不为真的类型保护所约束时。")]),e._v(" "),t("p",[e._v("never类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是never的子类型或可以赋值给never类型（除了never本身之外）。 即使 any也不可以赋值给never。")]),e._v(" "),t("p",[e._v("下面是一些返回never类型的函数：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 返回never的函数必须存在无法达到的终点\nfunction error(message: string): never {\n  throw new Error(message)\n}\n\n// 推断的返回值类型为never\nfunction fail() {\n  return error("Something failed")\n}\n\n// 返回never的函数必须存在无法达到的终点\nfunction infiniteLoop(): never {\n  while (true) {\n  }\n}\n')])])]),t("h4",{attrs:{id:"symbol"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[e._v("#")]),e._v(" Symbol")]),e._v(" "),t("p",[e._v("自ECMAScript 2015起，symbol成为了一种新的原生类型，就像number和string一样。 symbol类型的值是通过Symbol构造函数创建的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('let sym1 = Symbol();\nlet sym2 = Symbol("key"); // 可选的字符串key\n')])])]),t("p",[e._v("Symbols是不可改变且唯一的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('let sym2 = Symbol("key")\nlet sym3 = Symbol("key")\n\nsym2 === sym3 // false, symbols是唯一的\n')])])]),t("p",[e._v("像字符串一样，symbols也可以被用做对象属性的键。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('let sym = Symbol()\n\nlet obj = {\n  [sym]: "value"\n}\n\nconsole.log(obj[sym]) // "value"\n')])])]),t("p",[e._v("Symbols也可以与计算出的属性名声明相结合来声明对象的属性和类成员。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const getClassNameSymbol = Symbol()\n\nclass C {\n  [getClassNameSymbol](){\n    return "C"\n  }\n}\n\nlet c = new C()\nlet className = c[getClassNameSymbol]() \nconsole.log(className)// "C"\n')])])]),t("h2",{attrs:{id:"三-ts中的函数详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-ts中的函数详解"}},[e._v("#")]),e._v(" 三. ts中的函数详解")]),e._v(" "),t("h3",{attrs:{id:"_3-1-函数的类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-函数的类型"}},[e._v("#")]),e._v(" 3-1 函数的类型")]),e._v(" "),t("h4",{attrs:{id:"函数声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数声明"}},[e._v("#")]),e._v(" 函数声明")]),e._v(" "),t("p",[e._v("在 JavaScript 中，有两种常见的定义函数的方式——函数声明（Function Declaration）和函数表达式（Function Expression）：")]),e._v(" "),t("p",[e._v("​")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 函数声明（Function Declaration）\nfunction sum(x, y) {\n  return x + y\n}\n\n// 函数表达式（Function Expression）\nlet mySum = function (x, y) {\n  return x + y\n}\n")])])]),t("p",[e._v("​")]),e._v(" "),t("p",[e._v("一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function sum(x: number, y: number): number {\n  return x + y\n}\n")])])]),t("p",[e._v("注意，"),t("strong",[e._v("输入多余的（或者少于要求的）参数，是不被允许的")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function sum(x: number, y: number): number {\n  return x + y\n}\nsum(1, 2, 3)\n\n// Expected 2 arguments, but got 3.\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function sum(x: number, y: number): number {\n  return x + y\n}\nsum(1)\n\n// An argument for 'y' was not provided.\n")])])]),t("h4",{attrs:{id:"函数表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数表达式"}},[e._v("#")]),e._v(" 函数表达式")]),e._v(" "),t("p",[e._v("如果要我们现在写一个对函数表达式（Function Expression）的定义，可能会写成这样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let mySum = function (x: number, y: number): number {\n  return x + y\n}\n")])])]),t("p",[e._v("这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 "),t("code",[e._v("mySum")]),e._v("，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给 "),t("code",[e._v("mySum")]),e._v(" 添加类型，则应该是这样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let mySum: (x: number, y: number) => number = function (x: number, y: number): number {\n  return x + y\n}\n")])])]),t("p",[e._v("注意不要混淆了 TypeScript 中的 "),t("code",[e._v("=>")]),e._v(" 和 ES6 中的 "),t("code",[e._v("=>")]),e._v("。")]),e._v(" "),t("p",[e._v("在 TypeScript 的类型定义中，"),t("code",[e._v("=>")]),e._v(" 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。")]),e._v(" "),t("p",[e._v("在 ES6 中，"),t("code",[e._v("=>")]),e._v(" 叫做箭头函数，应用十分广泛，可以参考 "),t("a",{attrs:{href:"https://www.cnblogs.com/mengff/p/9656486.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ES6 中的箭头函数"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"_3-2-用接口定义函数的形状"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-用接口定义函数的形状"}},[e._v("#")]),e._v(" 3-2 用接口定义函数的形状")]),e._v(" "),t("p",[e._v("我们也可以使用接口的方式来定义一个函数需要符合的形状：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface SearchFunc {\n  (source: string, subString: string): boolean\n}\n\nlet mySearch: SearchFunc\nmySearch = function(source: string, subString: string) {\n  return source.search(subString) !== -1\n}\n")])])]),t("h3",{attrs:{id:"_3-3-可选参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-可选参数"}},[e._v("#")]),e._v(" 3-3 可选参数")]),e._v(" "),t("p",[e._v("前面提到，输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？")]),e._v(" "),t("p",[e._v("与接口中的可选属性类似，我们用 "),t("code",[e._v("?")]),e._v(" 表示可选的参数：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function buildName(firstName: string, lastName?: string) {\n  if (lastName) {\n  return firstName + ' ' + lastName\n  } else {\n  return firstName\n  }\n}\nlet tomcat = buildName('Tom', 'Cat')\nlet tom = buildName('Tom')\n")])])]),t("p",[e._v("需要注意的是，可选参数必须接在必需参数后面。换句话说，"),t("strong",[e._v("可选参数后面不允许再出现必需参数了")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function buildName(firstName?: string, lastName: string) {\n  if (firstName) {\n  return firstName + ' ' + lastName\n  } else {\n  return lastName\n  }\n}\nlet tomcat = buildName('Tom', 'Cat')\nlet tom = buildName(undefined, 'Tom')\n\n// A required parameter cannot follow an optional parameter.\n")])])]),t("h3",{attrs:{id:"_3-4-参数默认值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-参数默认值"}},[e._v("#")]),e._v(" 3-4 参数默认值")]),e._v(" "),t("p",[e._v("在 ES6 中，我们允许给函数的参数添加默认值，"),t("strong",[e._v("TypeScript 会将添加了默认值的参数识别为可选参数")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function buildName(firstName: string, lastName: string = 'Cat') {\n  return firstName + ' ' + lastName\n}\nlet tomcat = buildName('Tom', 'Cat')\nlet tom = buildName('Tom')\n")])])]),t("p",[e._v("此时就不受「可选参数必须接在必需参数后面」的限制了：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function buildName(firstName: string = 'Tom', lastName: string) {\n  return firstName + ' ' + lastName\n}\nlet tomcat = buildName('Tom', 'Cat')\nlet cat = buildName(undefined, 'Cat')\n")])])]),t("h3",{attrs:{id:"_3-5-剩余参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-剩余参数"}},[e._v("#")]),e._v(" 3-5 剩余参数")]),e._v(" "),t("p",[e._v("ES6 中，可以使用 "),t("code",[e._v("...rest")]),e._v(" 的方式获取函数中的剩余参数（rest 参数）：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function push(array, ...items) {\n  items.forEach(function(item) {\n  array.push(item)\n  })\n}\n\nlet a = []\npush(a, 1, 2, 3)\n")])])]),t("p",[e._v("事实上，"),t("code",[e._v("items")]),e._v(" 是一个数组。所以我们可以用数组的类型来定义它：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function push(array: any[], ...items: any[]) {\n  items.forEach(function(item) {\n  array.push(item)\n  })\n}\n\nlet a:any[] = []\npush(a, 1, 2, 3)\n")])])]),t("h3",{attrs:{id:"_3-6-重载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-重载"}},[e._v("#")]),e._v(" 3-6 重载")]),e._v(" "),t("p",[e._v("重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。")]),e._v(" "),t("p",[e._v("比如，我们需要实现一个函数 "),t("code",[e._v("reverse")]),e._v("，输入数字 "),t("code",[e._v("123")]),e._v(" 的时候，输出反转的数字 "),t("code",[e._v("321")]),e._v("，输入字符串 "),t("code",[e._v("'hello'")]),e._v(" 的时候，输出反转的字符串 "),t("code",[e._v("'olleh'")]),e._v("。")]),e._v(" "),t("p",[e._v("利用联合类型，我们可以这么实现：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function reverse(x: number | string): number | string {\n  if (typeof x === 'number') {\n  return Number(x.toString().split('').reverse().join(''))\n  } else if (typeof x === 'string') {\n  return x.split('').reverse().join('')\n  }\n}\n")])])]),t("p",[e._v("然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。")]),e._v(" "),t("p",[e._v("这时，我们可以使用重载定义多个 "),t("code",[e._v("reverse")]),e._v(" 的函数类型：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function reverse(x: number): number\nfunction reverse(x: string): string\nfunction reverse(x: number | string): number | string {\n  if (typeof x === 'number') {\n  return Number(x.toString().split('').reverse().join(''))\n  } else if (typeof x === 'string') {\n  return x.split('').reverse().join('')\n  }\n}\n")])])]),t("p",[e._v("上例中，我们重复定义了多次函数 "),t("code",[e._v("reverse")]),e._v("，前几次都是函数定义，最后一次是函数实现。")]),e._v(" "),t("h2",{attrs:{id:"四-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-接口"}},[e._v("#")]),e._v(" 四. 接口")]),e._v(" "),t("h3",{attrs:{id:"_4-1-接口定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-接口定义"}},[e._v("#")]),e._v(" 4-1 接口定义")]),e._v(" "),t("p",[e._v("在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。")]),e._v(" "),t("p",[e._v("在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。 TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。")]),e._v(" "),t("h4",{attrs:{id:"简单的例子-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单的例子-2"}},[e._v("#")]),e._v(" 简单的例子")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Person {\n  name: string\n  age: number\n}\n\nlet tom: Person = {\n  name: 'Tom',\n  age: 25\n}\n")])])]),t("p",[e._v("上面的例子中，我们定义了一个接口 "),t("code",[e._v("Person")]),e._v("，接着定义了一个变量 "),t("code",[e._v("tom")]),e._v("，它的类型是 "),t("code",[e._v("Person")]),e._v("。这样，我们就约束了 "),t("code",[e._v("tom")]),e._v(" 的形状必须和接口 "),t("code",[e._v("Person")]),e._v(" 一致。 接口一般首字母大写。有的编程语言中会建议接口的名称加上 I 前缀。 定义的变量比接口少了一些属性是不允许的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Person {\n  name: string\n  age: number\n}\n\nlet tom: Person = {\n  name: 'Tom'\n}\n// Property 'age' is missing in type '{ name: string }' but required in type 'Person'.\n")])])]),t("p",[e._v("多一些属性也是不允许的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Person {\n  name: string\n  age: number\n}\n\nlet tom: Person = {\n  name: 'Tom',\n  age: 25,\n  gender: 'male'\n}\n\n// Type '{ name: string age: number gender: string }' is not assignable to type 'Person'.\n// Object literal may only specify known properties, and 'gender' does not exist in type 'Person'.\n")])])]),t("p",[e._v("可见， "),t("em",[e._v("赋值的时候，变量的形状必须和接口的形状保持一致。")])]),e._v(" "),t("h3",{attrs:{id:"_4-2-可选属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-可选属性"}},[e._v("#")]),e._v(" 4-2 可选属性")]),e._v(" "),t("p",[e._v("有时我们希望不要完全匹配一个形状，那么可以用可选属性：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Person {\n  name: string\n  age?: number\n}\n\nlet tom: Person = {\n  name: 'Tom'\n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Person {\n  name: string\n  age?: number\n}\n\nlet tom: Person = {\n  name: 'Tom',\n  age: 25\n}\n")])])]),t("p",[e._v("可选属性的含义是该属性可以不存在。")]),e._v(" "),t("p",[e._v("这时仍然不允许添加未定义的属性：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Person {\n  name: string\n  age?: number\n}\n\nlet tom: Person = {\n  name: 'Tom',\n  age: 25,\n  gender: 'male'\n}\n\n// Type '{ name: string age: number gender: string }' is not assignable to type 'Person'.\n// Object literal may only specify known properties, and 'gender' does not exist in type 'Person'.\n")])])]),t("h3",{attrs:{id:"_4-3-任意属性（索引签名）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-任意属性（索引签名）"}},[e._v("#")]),e._v(" 4-3 任意属性（索引签名）")]),e._v(" "),t("p",[e._v("有时候我们希望一个接口允许有任意的属性，可以使用如下方式：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Person {\n  name: string\n  age?: number\n  [propName: string]: any\n}\n\nlet tom: Person = {\n  name: 'Tom',\n  gender: 'male'\n}\n")])])]),t("p",[e._v("使用 [propName: string] 定义了任意属性取 string 类型的值。 需要注意的是，一旦定义了任意属性，"),t("strong",[e._v("那么确定属性和可选属性的类型都必须是它的类型的子集")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Person {\n  name: string\n  age?: number\n  [propName: string]: string\n}\n\nlet tom: Person = {\n  name: 'Tom',\n  age: 25,\n  gender: 'male'\n}\n\n// Property 'age' of type 'number | undefined' is not assignable to string index type 'string'.\n// Type '{ name: string age: number gender: string }' is not assignable to type 'Person'.\n// Property 'age' is incompatible with index signature.\n// Type 'number' is not assignable to type 'string'.\n")])])]),t("p",[e._v("上例中，任意属性的值允许是 string，但是可选属性 age 的值却是 number，number 不是 string 的子属性，所以报错了。")]),e._v(" "),t("p",[e._v("另外，在报错信息中可以看出，此时 "),t("code",[e._v("{ name: 'Tom', age: 25, gender: 'male' }")]),e._v(" 的类型被推断成了 { "),t("code",[e._v("[x: string]: string | number name: string age: number gender: string }")]),e._v("，这是联合类型和接口的结合。")]),e._v(" "),t("h3",{attrs:{id:"_4-4-只读属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-只读属性"}},[e._v("#")]),e._v(" 4-4 只读属性")]),e._v(" "),t("p",[e._v("有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用 "),t("code",[e._v("readonly")]),e._v(" 定义只读属性：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Person {\n  readonly id: number\n  name: string\n  age?: number\n  [propName: string]: any\n}\n\nlet tom: Person = {\n  id: 89757,\n  name: 'Tom',\n  gender: 'male'\n}\n\ntom.id = 9527\n// Cannot assign to 'id' because it is a read-only property.\n")])])]),t("p",[e._v("上例中，使用 "),t("code",[e._v("readonly")]),e._v(" 定义的属性 "),t("code",[e._v("id")]),e._v(" 初始化后，又被赋值了，所以报错了。")]),e._v(" "),t("p",[e._v("*"),t("strong",[e._v("注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：*")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Person {\n  readonly id: number\n  name: string\n  age?: number\n  [propName: string]: any\n}\n\nlet tom: Person = {\n  name: 'Tom',\n  gender: 'male'\n}\n\ntom.id = 89757\n// Property 'id' is missing in type '{ name: string gender: string }' but required in type 'Person'.\n// Cannot assign to 'id' because it is a read-only property.\n")])])]),t("p",[e._v("上例中，报错信息有两处，第一处是在对 tom 进行赋值的时候，没有给 id 赋值。 第二处是在给 tom.id 赋值的时候，由于它是只读属性，所以报错了")]),e._v(" "),t("h2",{attrs:{id:"五-类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-类"}},[e._v("#")]),e._v(" 五. 类")]),e._v(" "),t("p",[e._v("传统方法中，JavaScript 通过构造函数实现类的概念，通过原型链实现继承。而在 ES6 中，我们终于迎来了 "),t("code",[e._v("class")]),e._v("。")]),e._v(" "),t("p",[e._v("TypeScript 除了实现了所有 ES6 中的类的功能以外，还添加了一些新的用法。")]),e._v(" "),t("h3",{attrs:{id:"_5-1-类的概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-类的概念"}},[e._v("#")]),e._v(" 5-1 类的概念")]),e._v(" "),t("p",[e._v("虽然 JavaScript 中有类的概念，但是可能大多数 JavaScript 程序员并不是非常熟悉类，这里对类相关的概念做一个简单的介绍。")]),e._v(" "),t("ul",[t("li",[e._v("类(Class)：定义了一件事物的抽象特点，包含它的属性和方法")]),e._v(" "),t("li",[e._v("对象（Object）：类的实例，通过 "),t("code",[e._v("new")]),e._v(" 生成")]),e._v(" "),t("li",[e._v("面向对象（OOP）的三大特性：封装、继承、多态")]),e._v(" "),t("li",[e._v("封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据")]),e._v(" "),t("li",[e._v("继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性")]),e._v(" "),t("li",[e._v("多态（Polymorphism）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。比如 "),t("code",[e._v("Cat")]),e._v(" 和 "),t("code",[e._v("Dog")]),e._v(" 都继承自 "),t("code",[e._v("Animal")]),e._v("，但是分别实现了自己的 "),t("code",[e._v("eat")]),e._v(" 方法。此时针对某一个实例，我们无需了解它是 "),t("code",[e._v("Cat")]),e._v(" 还是 "),t("code",[e._v("Dog")]),e._v("，就可以直接调用 "),t("code",[e._v("eat")]),e._v(" 方法，程序会自动判断出来应该如何执行 "),t("code",[e._v("eat")])]),e._v(" "),t("li",[e._v("存取器（getter & setter）：用以改变属性的读取和赋值行为")]),e._v(" "),t("li",[e._v("修饰符（Modifiers）：修饰符是一些关键字，用于限定成员或类型的性质。比如 "),t("code",[e._v("public")]),e._v(" 表示公有属性或方法")]),e._v(" "),t("li",[e._v("抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现")]),e._v(" "),t("li",[e._v("接口（Interfaces）：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（implements）。一个类只能继承自另一个类，但是可以实现多个接口")])]),e._v(" "),t("h3",{attrs:{id:"_5-2-es6中类的用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-es6中类的用法"}},[e._v("#")]),e._v(" 5-2 ES6中类的用法")]),e._v(" "),t("p",[e._v("下面我们先回顾一下 ES6 中类的用法。")]),e._v(" "),t("h4",{attrs:{id:"属性和方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性和方法"}},[e._v("#")]),e._v(" 属性和方法")]),e._v(" "),t("p",[e._v("使用 "),t("code",[e._v("class")]),e._v(" 定义类，使用 "),t("code",[e._v("constructor")]),e._v(" 定义构造函数。")]),e._v(" "),t("p",[e._v("通过 "),t("code",[e._v("new")]),e._v(" 生成新实例的时候，会自动调用构造函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Animal {\n  constructor(public name) {\n   this.name = name\n  }\n  sayHi() {\n   return `My name is ${this.name}`\n  }\n}\n\nlet a = new Animal('Jack')\nconsole.log(a.sayHi()) // My name is Jack\n")])])]),t("h4",{attrs:{id:"类的继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的继承"}},[e._v("#")]),e._v(" 类的继承")]),e._v(" "),t("p",[e._v("使用 "),t("code",[e._v("extends")]),e._v(" 关键字实现继承，子类中使用 "),t("code",[e._v("super")]),e._v(" 关键字来调用父类的构造函数和方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Cat extends Animal {\n  constructor(name) {\n  \tsuper(name) // 调用父类的 constructor(name)\n  }\n  sayHi() {\n  \treturn 'Meow, ' + super.sayHi() // 调用父类的 sayHi()\n  }\n}\n\nlet c = new Cat('Tom') // Tom\nconsole.log(c.sayHi()) // Meow, My name is Tom\n")])])]),t("h4",{attrs:{id:"存取器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存取器"}},[e._v("#")]),e._v(" 存取器")]),e._v(" "),t("p",[e._v("使用 getter 和 setter 可以改变属性的赋值和读取行为：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class Animal{\n    constructor(public name:string){\n        this.name = name\n    }\n    get sayHi(){\n        return this.name\n    }\n    set sayHi(value:string){\n        this.name = value\n    }\n}\nlet animal = new Animal("dog");\nconsole.log(animal.sayHi)\nanimal.sayHi = "pig"\nconsole.log(animal.sayHi)\n')])])]),t("h4",{attrs:{id:"静态方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[e._v("#")]),e._v(" 静态方法")]),e._v(" "),t("p",[e._v("使用 "),t("code",[e._v("static")]),e._v(" 修饰符修饰的方法称为静态方法，它们不需要实例化，而是直接通过类来调用：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Animal {\n  static isAnimal(a) {\n  \treturn a instanceof Animal\n  }\n}\n\nlet a = new Animal('Jack')\nAnimal.isAnimal(a) // true\na.isAnimal(a) // TypeError: a.isAnimal is not a function\n")])])]),t("h3",{attrs:{id:"_5-3-typescript中类的用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-typescript中类的用法"}},[e._v("#")]),e._v(" 5-3 TypeScript中类的用法")]),e._v(" "),t("h4",{attrs:{id:"public-private-和-protected"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#public-private-和-protected"}},[e._v("#")]),e._v(" public private 和 protected")]),e._v(" "),t("p",[e._v("TypeScript 可以使用三种访问修饰符（Access Modifiers），分别是 "),t("code",[e._v("public")]),e._v("、"),t("code",[e._v("private")]),e._v(" 和 "),t("code",[e._v("protected")]),e._v("。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("public")]),e._v(" 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 "),t("code",[e._v("public")]),e._v("的")]),e._v(" "),t("li",[t("code",[e._v("private")]),e._v(" 修饰的属性或方法是私有的，不能在声明它的类的外部访问")]),e._v(" "),t("li",[t("code",[e._v("protected")]),e._v(" 修饰的属性或方法是受保护的，它和 "),t("code",[e._v("private")]),e._v(" 类似，区别是它在子类中也是允许被访问的")])]),e._v(" "),t("p",[e._v("下面举一些例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class Animal{\n    public name:string = "cat"\n    public sayName(){\n        console.log("sayName")\n    }\n}\nlet animal = new Animal()\nconsole.log(animal.name)\nanimal.sayName()\n')])])]),t("p",[e._v("上面的例子中，"),t("code",[e._v("name")]),e._v("与sayName 被设置为了 "),t("code",[e._v("public")]),e._v("，所以直接访问实例的属性和方法是允许的。")]),e._v(" "),t("p",[e._v("如果属性不能被外部进行访问的话，请设置成private")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class Animal{\n    private name:string = "cat"\n    public sayName(){\n        console.log("sayName")\n    }\n}\nlet animal = new Animal()\nconsole.log(animal.name) //报错 name为私有属性，请在Animal类中进行访问\nanimal.sayName()\n')])])]),t("p",[e._v("而如果是用 "),t("code",[e._v("protected")]),e._v(" 修饰，则允许在子类中访问")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class Animal{\n    protected name:string = "cat"\n    public sayName(){\n        console.log("sayName")\n    }\n}\nclass Dog extends Animal{\n    sayHi(){\n        console.log(this.name) //子类可以访问父类的public与protected的属性和方法\n    }\n}\n')])])]),t("h4",{attrs:{id:"readonly"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#readonly"}},[e._v("#")]),e._v(" readonly")]),e._v(" "),t("p",[e._v("只读属性关键字，只允许出现在属性声明或索引签名中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class Animal{\n    readonly name:string = "cat"\n    public sayName(){\n        console.log("sayName")\n    }\n}\nlet animal = new Animal()\nanimal.name = \'dog\' //报错了 name只能读取不能进行修改\nconsole.log(animal.name) \n')])])]),t("h4",{attrs:{id:"抽象类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[e._v("#")]),e._v(" 抽象类")]),e._v(" "),t("p",[t("code",[e._v("abstract")]),e._v(" 用于定义抽象类和其中的抽象方法。")]),e._v(" "),t("p",[e._v("什么是抽象类？")]),e._v(" "),t("p",[e._v("首先，抽象类是不允许被实例化的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("abstract class Animal {\n  public name:string = \"\"\n  public constructor(name:string) {\n  \tthis.name = name\n  }\n  public abstract sayHi():void\n}\n\nlet a = new Animal('Jack')\n\n// Cannot create an instance of an abstract class.\n")])])]),t("p",[e._v("上面的例子中，我们定义了一个抽象类 "),t("code",[e._v("Animal")]),e._v("，并且定义了一个抽象方法 "),t("code",[e._v("sayHi")]),e._v("。在实例化抽象类的时候报错了。")]),e._v(" "),t("p",[e._v("其次，抽象类中的抽象方法必须被子类实现：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("abstract class Animal {\n  public name:string = \"\"\n  public constructor(name:string) {\n  \tthis.name = name\n  }\n  public abstract sayHi():void\n}\n\nclass Cat extends Animal {\n  public sayHi() {\n    console.log(`${this.name} is eating.`)\n  }\n}\n\nlet cat = new Cat('Tom')\ncat.sayHi()\n")])])]),t("h2",{attrs:{id:"六-类和接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六-类和接口"}},[e._v("#")]),e._v(" 六. 类和接口")]),e._v(" "),t("p",[e._v("之前学习过接口（Interfaces）可以用于对「对象的形状（Shape）」进行描述。")]),e._v(" "),t("p",[e._v("这一章主要介绍接口的另一个用途，对类的一部分行为进行抽象。")]),e._v(" "),t("h3",{attrs:{id:"_6-1-类实现接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-类实现接口"}},[e._v("#")]),e._v(" 6-1 类实现接口")]),e._v(" "),t("p",[e._v("实现（implements）是面向对象中的一个重要概念。一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口（interfaces），用 "),t("code",[e._v("implements")]),e._v(" 关键字来实现。这个特性大大提高了面向对象的灵活性。")]),e._v(" "),t("p",[e._v("举例来说，门是一个类，防盗门是门的子类。如果防盗门有一个报警器的功能，我们可以简单的给防盗门添加一个报警方法。这时候如果有另一个类，车，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门和车都去实现它：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Alarm {\n  alert():void\n}\n\nclass Door {\n}\n\nclass SecurityDoor extends Door implements Alarm {\n  alert() {\n  \tconsole.log('SecurityDoor alert')\n  }\n}\n\nclass Car implements Alarm {\n  alert() {\n  \tconsole.log('Car alert')\n  }\n}\n")])])]),t("p",[e._v("一个类可以实现多个接口：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Alarm {\n    alert():void\n}\n  \ninterface Light {\n    lightOn():void\n    lightOff():void\n}\n  \nclass Car implements Alarm, Light {\n    alert() {\n        console.log('Car alert')\n    }\n    lightOn() {\n        console.log('Car light on')\n    }\n    lightOff() {\n        console.log('Car light off')\n    }\n}\n")])])]),t("p",[e._v("上例中，"),t("code",[e._v("Car")]),e._v(" 实现了 "),t("code",[e._v("Alarm")]),e._v(" 和 "),t("code",[e._v("Light")]),e._v(" 接口，既能报警，也能开关车灯。")]),e._v(" "),t("h3",{attrs:{id:"_6-2-接口继承接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-接口继承接口"}},[e._v("#")]),e._v(" 6-2 接口继承接口")]),e._v(" "),t("p",[e._v("接口与接口之间可以是继承关系：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Alarm {\n    alert():void\n}\n  \ninterface LightableAlarm extends Alarm {\n    lightOn():void\n    lightOff():void\n}\n")])])]),t("p",[e._v("上例中，我们使用 "),t("code",[e._v("extends")]),e._v(" 使 "),t("code",[e._v("LightableAlarm")]),e._v(" 继承 "),t("code",[e._v("Alarm")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"_6-3-接口继承类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-接口继承类"}},[e._v("#")]),e._v(" 6-3 接口继承类")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Point {\n    x: number = 1\n    y: number = 2\n}\n  \ninterface Point3d extends Point {\n   z:number\n}\n  \nlet point3d: Point3d  = {x:1,y:2,z:3}\n")])])]),t("h3",{attrs:{id:"_6-4-混合类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-混合类型"}},[e._v("#")]),e._v(" 6-4 混合类型")]),e._v(" "),t("p",[e._v("之前学习过，可以使用接口的方式来定义一个函数需要符合的形状：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface SearchFunc {\n  (source: string, subString: string): boolean\n}\n\nlet mySearch: SearchFunc\nmySearch = function(source: string, subString: string) {\n  return source.search(subString) !== -1\n}\n")])])]),t("h2",{attrs:{id:"七-泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七-泛型"}},[e._v("#")]),e._v(" 七. 泛型")]),e._v(" "),t("p",[e._v("泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。")]),e._v(" "),t("h3",{attrs:{id:"_7-1-简单的例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-简单的例子"}},[e._v("#")]),e._v(" 7-1 简单的例子")]),e._v(" "),t("p",[e._v("首先，我们来实现一个函数 "),t("code",[e._v("createArray")]),e._v("，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function createArray(length: number, value: any): Array<any> {\n  let result = []\n  for (let i = 0; i < length; i++) {\n    result[i] = value\n  }\n  return result\n}\n\ncreateArray(3, 'x'); // ['x', 'x', 'x']\n")])])]),t("p",[e._v("上例中，我们使用了之前提到过的数组泛型来定义返回值的类型。")]),e._v(" "),t("p",[e._v("这段代码编译不会报错，但是一个显而易见的缺陷是，它并没有准确的定义返回值的类型：")]),e._v(" "),t("p",[t("code",[e._v("Array")]),e._v(" 允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的 "),t("code",[e._v("value")]),e._v("的类型。")]),e._v(" "),t("p",[e._v("这时候，泛型就派上用场了：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function createArray<T>(length: number, value: T): Array<T> {\n  let result: T[] = []\n  for (let i = 0; i < length; i++) {\n    result[i] = value\n  }\n  return result\n}\n\ncreateArray<string>(3, 'x'); // ['x', 'x', 'x']\n")])])]),t("p",[e._v("上例中，我们在函数名后添加了"),t("T",[e._v(",其中 "),t("code",[e._v("T")]),e._v(" 用来指代任意输入的类型，在后面的输入 "),t("code",[e._v("value: T")]),e._v(" 和输出 "),t("code",[e._v("Array")]),e._v(" 中即可使用了。")])],1),e._v(" "),t("p",[e._v("接着在调用的时候，可以指定它具体的类型为 "),t("code",[e._v("string")]),e._v("。当然，也可以不手动指定，而让类型推论自动推算出来：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function createArray<T>(length: number, value: T): Array<T> {\n    let result: T[] = []\n    for (let i = 0; i < length; i++) {\n      result[i] = value\n    }\n    return result\n  }\n  \n  createArray(3, 'x') // ['x', 'x', 'x']\n")])])]),t("h3",{attrs:{id:"_7-2-多个类型的参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-多个类型的参数"}},[e._v("#")]),e._v(" 7-2 多个类型的参数")]),e._v(" "),t("p",[e._v("定义泛型的时候，可以一次定义多个类型参数：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function swap<T, U>(tuple: [T, U]): [U, T] {\n    return [tuple[1], tuple[0]]\n}\nconsole.log(swap([7, 'seven'])) // ['seven', 7]\n")])])]),t("p",[e._v("上例中，我们定义了一个 "),t("code",[e._v("swap")]),e._v(" 函数，用来交换输入的元组")]),e._v(" "),t("h3",{attrs:{id:"_7-3-泛型约束"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-泛型约束"}},[e._v("#")]),e._v(" 7-3 泛型约束")]),e._v(" "),t("p",[e._v("在函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意的操作它的属性或方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function loggingIdentity<T>(arg: T): T {\n  console.log(arg.length)\n  return arg\n}\n\n// Property 'length' does not exist on type 'T'.\n")])])]),t("p",[e._v("上例中，泛型 "),t("code",[e._v("T")]),e._v(" 不一定包含属性 "),t("code",[e._v("length")]),e._v("，所以编译的时候报错了。")]),e._v(" "),t("p",[e._v("这时，我们可以对泛型进行约束，只允许这个函数传入那些包含 "),t("code",[e._v("length")]),e._v(" 属性的变量。这就是泛型约束：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Lengthwise {\n    length: number\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n    console.log(arg.length)\n    return arg\n}\n")])])]),t("p",[e._v("上例中，我们使用了 "),t("code",[e._v("extends")]),e._v(" 约束了泛型 "),t("code",[e._v("T")]),e._v(" 必须符合接口 "),t("code",[e._v("Lengthwise")]),e._v(" 的形状，也就是必须包含 "),t("code",[e._v("length")]),e._v(" 属性。")]),e._v(" "),t("p",[e._v("此时如果调用 "),t("code",[e._v("loggingIdentity")]),e._v(" 的时候，传入的 "),t("code",[e._v("arg")]),e._v(" 不包含 "),t("code",[e._v("length")]),e._v("，那么在编译阶段就会报错了：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Lengthwise {\n  length: number\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length)\n  return arg\n}\n\nloggingIdentity(7)\n\n// Argument of type '7' is not assignable to parameter of type 'Lengthwise'.\n")])])]),t("h3",{attrs:{id:"_7-4-泛型接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-泛型接口"}},[e._v("#")]),e._v(" 7-4 泛型接口")]),e._v(" "),t("p",[e._v("之前学习过接口中函数的定义，可以使用接口的方式来定义一个函数需要符合的形状：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface SearchFunc {\n    (source: string, subString: string): boolean\n}\n  \nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n    return source.search(subString) !== -1\n}\n")])])]),t("p",[e._v("当然也可以使用含有泛型的接口来定义函数的形状：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface CreateArrayFunc {\n    <T>(length: number, value: T): Array<T>\n}\n  \nlet createArray: CreateArrayFunc;\ncreateArray = function<T>(length: number, value: T): Array<T> {\n    let result: T[] = []\n    for (let i = 0; i < length; i++) {\n        result[i] = value\n    }\n    return result\n}\n\ncreateArray(3, 'x') // ['x', 'x', 'x']\n")])])]),t("p",[e._v("进一步，我们可以把泛型参数提前到接口名上：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface CreateArrayFunc<T> {\n    (length: number, value: T): Array<T>\n}\n  \nlet createArray: CreateArrayFunc<string>\ncreateArray = function<T>(length: number, value: T): Array<T> {\n    let result: T[] = []\n    for (let i = 0; i < length; i++) {\n        result[i] = value\n    }\n    return result\n}\n\ncreateArray(3, 'x'); // ['x', 'x', 'x']\n")])])]),t("p",[e._v("注意，此时在使用泛型接口的时候，需要定义泛型的类型。")]),e._v(" "),t("h3",{attrs:{id:"_7-5-泛型类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-泛型类"}},[e._v("#")]),e._v(" 7-5 泛型类")]),e._v(" "),t("p",[e._v("与泛型接口类似，泛型也可以用于类的类型定义中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class GenericNumber<T> {\n  zeroValue: T\n  add: (x: T, y: T) => T\n}\n\nlet myGenericNumber = new GenericNumber<number>()\nmyGenericNumber.zeroValue = 0\nmyGenericNumber.add = function(x, y) { return x + y }\n")])])]),t("p",[e._v('此处 zeroValue，add 未赋值会出错，设置 "strictPropertyInitialization": false, 关闭提示')]),e._v(" "),t("h2",{attrs:{id:"八-迭代器和生成器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八-迭代器和生成器"}},[e._v("#")]),e._v(" 八. 迭代器和生成器")]),e._v(" "),t("h3",{attrs:{id:"可迭代性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可迭代性"}},[e._v("#")]),e._v(" 可迭代性")]),e._v(" "),t("h3",{attrs:{id:"for-of-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-of-语句"}},[e._v("#")]),e._v(" for..of 语句")]),e._v(" "),t("p",[e._v("for..of会遍历可迭代的对象，调用对象上的Symbol.iterator方法。 下面是在数组上使用 for..of的简单例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('let someArray = [1, "string", false]\n\nfor (let entry of someArray) {\n  console.log(entry) // 1, "string", false\n}\n')])])]),t("h3",{attrs:{id:"for-of-vs-for-in-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-of-vs-for-in-语句"}},[e._v("#")]),e._v(" for..of vs. for..in 语句")]),e._v(" "),t("p",[e._v("for..of和for..in均可迭代一个列表；但是用于迭代的值却不同，for..in迭代的是对象的键的列表，而for..of则迭代对象的键对应的值。")]),e._v(" "),t("p",[e._v("下面的例子展示了两者之间的区别：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('let list = [4, 5, 6]\n\nfor (let i in list) {\n  console.log(i) // "0", "1", "2",\n}\n\nfor (let i of list) {\n  console.log(i) // "4", "5", "6"\n}\n')])])]),t("p",[e._v("另一个区别是for..in可以操作任何对象, 它提供了查看对象属性的一种方法。 但是 for..of关注于迭代对象的值。内置对象Map和Set已经实现了Symbol.iterator方法，让我们可以访问它们保存的值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('let pets = new Set(["Cat", "Dog", "Hamster"]);\npets["species"] = "mammals"\n\nfor (let pet in pets) {\n  console.log(pet) // "species"\n}\n\nfor (let pet of pets) {\n  console.log(pet) // "Cat", "Dog", "Hamster"\n}\n')])])])])}),[],!1,null,null,null);a.default=s.exports}}]);